#include <iostream> // подключаем библиотеку для ввода и вывода данных
using namespace std; // используем пространство имён std, чтобы не писать std::

// 1. Функция для подсчёта суммы элементов массива через указатели
int sumArray(const int* begin, const int* end) { // принимает два указателя: на начало и конец массива
    int sum = 0; // переменная для хранения суммы
    for (const int* p = begin; p != end; ++p) { // цикл, проходящий по всем элементам массива с помощью указателя
        sum += *p; // добавляем значение текущего элемента (разыменовываем указатель)
    }
    return sum; // возвращаем общую сумму
}

// 3. Функция, возвращающая сумму двух чисел
int add(int a, int b) { // принимает два параметра типа int
    return a + b; // возвращает их сумму
}

// 3. Функция, возвращающая разность двух чисел
int subtract(int a, int b) { // принимает два параметра типа int
    return a - b; // возвращает их разность
}

// 4–5. Функция, возвращающая указатель на одну из функций в зависимости от символа операции
int (*getOperation(char op))(int, int) { // принимает символ и возвращает указатель на функцию с сигнатурой int(int, int)
    if (op == '+') return add; // если символ '+', возвращаем указатель на функцию add
    if (op == '-') return subtract; // если символ '-', возвращаем указатель на функцию subtract
    return nullptr; // если символ не подходит, возвращаем нулевой указатель (ошибка)
}

int main() { // точка входа в программу
    // 2. Проверяем функцию суммы массива
    int arr[] = {1, 2, 3, 4, 5}; // создаём массив из пяти целых чисел
    int result = sumArray(arr, arr + 5); // передаём указатель на начало и конец массива в функцию sumArray
    cout << "Сумма элементов массива: " << result << endl; // выводим результат суммы на экран

    // 6. Проверяем работу функции, возвращающей указатель на другую функцию
    char operation = '+'; // задаём символ операции
    int (*funcPtr)(int, int) = getOperation(operation); // получаем указатель на функцию add или subtract

    if (funcPtr) { // если указатель не нулевой (функция успешно выбрана)
        int value = funcPtr(10, 4); // вызываем выбранную функцию через указатель с аргументами 10 и 4
        cout << "Результат операции '" << operation << "': " << value << endl; // выводим результат вычисления
    } else {
        cout << "Неизвестная операция" << endl; // выводим сообщение об ошибке, если операция неизвестна
    }

    // 7. Создание динамического указателя на float
    float* dynFloat = new float(3.14f); // выделяем динамическую память и присваиваем ей значение 3.14

    // 8. Вывод и удаление динамической переменной
    cout << "Динамическое значение: " << *dynFloat << endl; // выводим значение, хранящееся по адресу указателя
    delete dynFloat; // освобождаем выделенную память, предотвращая утечку

    return 0; // завершаем выполнение программы
}
